use std::collections::HashMap;

use serde::Deserialize;

use super::classes::*;
use super::concepts::*;
use super::defines::*;
use super::MaybeCycle;

/// Called when a [CustomInput](https://wiki.factorio.com/Prototype/CustomInput) is activated.
#[derive(Debug, Deserialize)]
pub struct CustomInputEvent {
    /// The mouse cursor position when the custom input was activated.
    pub cursor_position: MapPosition,
    /// The prototype name of the custom input that was activated.
    pub input_name: String,
    /// Identifier of the event
    pub name: Events,
    /// The player that activated the custom input.
    pub player_index: u32,
    /// Information about the prototype that is selected when the custom input is used. Needs to be enabled on the custom input's prototype. `nil` if none is selected.
    pub selected_prototype: Option<SelectedPrototypeData>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a unit/group completes a command.
#[derive(Debug, Deserialize)]
pub struct OnAiCommandCompleted {
    /// Identifier of the event
    pub name: Events,
    pub result: BehaviorResult,
    /// Tick the event was generated.
    pub tick: u32,
    /// unit_number/group_number of the unit/group which just completed a command.
    pub unit_number: u32,
    /// Was this command generated by a distraction.
    pub was_distracted: bool,
}

/// Called when an area of the map is cloned.
#[derive(Debug, Deserialize)]
pub struct OnAreaCloned {
    pub clear_destination_decoratives: bool,
    pub clear_destination_entities: bool,
    pub clone_decoratives: bool,
    pub clone_entities: bool,
    pub clone_tiles: bool,
    pub destination_area: BoundingBox,
    pub destination_force: Option<MaybeCycle<LuaForce>>,
    pub destination_surface: MaybeCycle<LuaSurface>,
    /// Identifier of the event
    pub name: Events,
    pub source_area: BoundingBox,
    pub source_surface: MaybeCycle<LuaSurface>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a biter migration builds a base.
///
/// # Notes
///
/// * This will be called multiple times for each migration, once for every biter that is sacrificed to build part of the new base.
#[derive(Debug, Deserialize)]
pub struct OnBiterBaseBuilt {
    /// The entity that was built.
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a set of positions on the map is cloned.
#[derive(Debug, Deserialize)]
pub struct OnBrushCloned {
    pub clear_destination_decoratives: bool,
    pub clear_destination_entities: bool,
    pub clone_decoratives: bool,
    pub clone_entities: bool,
    pub clone_tiles: bool,
    pub destination_force: Option<MaybeCycle<LuaForce>>,
    pub destination_offset: TilePosition,
    pub destination_surface: MaybeCycle<LuaSurface>,
    /// Identifier of the event
    pub name: Events,
    pub source_offset: TilePosition,
    pub source_positions: Vec<TilePosition>,
    pub source_surface: MaybeCycle<LuaSurface>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a [defines.command.build_base](defines.command.build_base) command reaches its destination, and before building starts.
#[derive(Debug, Deserialize)]
pub struct OnBuildBaseArrived {
    /// The unit group the command was assigned to.
    pub group: Option<MaybeCycle<LuaUnitGroup>>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
    /// The unit the command was assigned to.
    pub unit: Option<MaybeCycle<LuaEntity>>,
}

/// Called when player builds something. Can be filtered using [LuaPlayerBuiltEntityEventFilter](LuaPlayerBuiltEntityEventFilter).
#[derive(Debug, Deserialize)]
pub struct OnBuiltEntity {
    pub created_entity: MaybeCycle<LuaEntity>,
    /// The item prototype used to build the entity. Note this won't exist in some situations (built from blueprint, undo, etc).
    pub item: Option<MaybeCycle<LuaItemPrototype>>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    pub stack: MaybeCycle<LuaItemStack>,
    /// The tags associated with this entity if any.
    pub tags: Option<Tags>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when the deconstruction of an entity is canceled. Can be filtered using [LuaEntityDeconstructionCancelledEventFilter](LuaEntityDeconstructionCancelledEventFilter).
#[derive(Debug, Deserialize)]
pub struct OnCancelledDeconstruction {
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: Option<u32>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when the upgrade of an entity is canceled. Can be filtered using [LuaUpgradeCancelledEventFilter](LuaUpgradeCancelledEventFilter).
#[derive(Debug, Deserialize)]
pub struct OnCancelledUpgrade {
    pub direction: Option<Direction>,
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: Option<u32>,
    pub target: MaybeCycle<LuaEntityPrototype>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a character corpse expires due to timeout or all of the items being removed from it.
///
/// # Notes
///
/// * this is not called if the corpse is mined. See [defines.events.on_pre_player_mined_item](defines.events.on_pre_player_mined_item) to detect that.
#[derive(Debug, Deserialize)]
pub struct OnCharacterCorpseExpired {
    /// The corpse.
    pub corpse: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a chart tag is created.
#[derive(Debug, Deserialize)]
pub struct OnChartTagAdded {
    pub force: MaybeCycle<LuaForce>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: Option<u32>,
    pub tag: MaybeCycle<LuaCustomChartTag>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a chart tag is modified by a player.
#[derive(Debug, Deserialize)]
pub struct OnChartTagModified {
    pub force: MaybeCycle<LuaForce>,
    /// Identifier of the event
    pub name: Events,
    pub old_icon: Option<SignalID>,
    pub old_player: Option<u32>,
    pub old_text: String,
    pub player_index: Option<u32>,
    pub tag: MaybeCycle<LuaCustomChartTag>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called just before a chart tag is deleted.
#[derive(Debug, Deserialize)]
pub struct OnChartTagRemoved {
    pub force: MaybeCycle<LuaForce>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: Option<u32>,
    pub tag: MaybeCycle<LuaCustomChartTag>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a chunk is charted or re-charted.
#[derive(Debug, Deserialize)]
pub struct OnChunkCharted {
    /// Area of the chunk.
    pub area: BoundingBox,
    pub force: MaybeCycle<LuaForce>,
    /// Identifier of the event
    pub name: Events,
    pub position: ChunkPosition,
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when one or more chunks are deleted using [LuaSurface::delete_chunk](LuaSurface::delete_chunk).
#[derive(Debug, Deserialize)]
pub struct OnChunkDeleted {
    /// Identifier of the event
    pub name: Events,
    /// The chunks deleted.
    pub positions: Vec<ChunkPosition>,
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a chunk is generated.
#[derive(Debug, Deserialize)]
pub struct OnChunkGenerated {
    /// Area of the chunk.
    pub area: BoundingBox,
    /// Identifier of the event
    pub name: Events,
    /// Position of the chunk.
    pub position: ChunkPosition,
    /// The surface the chunk is on.
    pub surface: MaybeCycle<LuaSurface>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a combat robot expires through a lack of energy, or timeout.
#[derive(Debug, Deserialize)]
pub struct OnCombatRobotExpired {
    /// Identifier of the event
    pub name: Events,
    /// The entity that owns the robot if any.
    pub owner: Option<MaybeCycle<LuaEntity>>,
    pub robot: MaybeCycle<LuaEntity>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a message is sent to the in-game console, either by a player or through the server interface.
///
/// # Notes
///
/// * This event only fires for plain messages, not for any commands (including `/shout` or `/whisper`).
#[derive(Debug, Deserialize)]
pub struct OnConsoleChat {
    /// The chat message that was sent.
    pub message: String,
    /// Identifier of the event
    pub name: Events,
    /// The player doing the chatting, if any.
    pub player_index: Option<u32>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when someone enters a command-like message regardless of it being a valid command.
#[derive(Debug, Deserialize)]
pub struct OnConsoleCommand {
    /// The command as typed without the preceding forward slash ('/').
    pub command: String,
    /// Identifier of the event
    pub name: Events,
    /// The parameters provided if any.
    pub parameters: String,
    /// The player if any.
    pub player_index: Option<u32>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a cutscene is cancelled by the player or by script.
#[derive(Debug, Deserialize)]
pub struct OnCutsceneCancelled {
    /// Identifier of the event
    pub name: Events,
    /// The player the cutscene was shown to.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a cutscene is playing, each time it reaches a waypoint in that cutscene.
///
/// This refers to an index in the table previously passed to set_controller which started the cutscene.
///
/// # Notes
///
/// * Due to implementation omission, waypoint_index is 0-based.
#[derive(Debug, Deserialize)]
pub struct OnCutsceneWaypointReached {
    /// Identifier of the event
    pub name: Events,
    /// The player index of the player viewing the cutscene.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
    /// The index of the waypoint we just completed.
    pub waypoint_index: u32,
}

/// Called when the map difficulty settings are changed.
///
/// # Notes
///
/// * It's not guaranteed that both settings are changed - just that at least one has been changed.
#[derive(Debug, Deserialize)]
pub struct OnDifficultySettingsChanged {
    /// Identifier of the event
    pub name: Events,
    pub old_recipe_difficulty: u32,
    pub old_technology_difficulty: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when an entity is cloned. Can be filtered for the source entity using [LuaEntityClonedEventFilter](LuaEntityClonedEventFilter).
#[derive(Debug, Deserialize)]
pub struct OnEntityCloned {
    pub destination: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    pub source: MaybeCycle<LuaEntity>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when an entity is damaged. Can be filtered using [LuaEntityDamagedEventFilter](LuaEntityDamagedEventFilter).
///
/// # Notes
///
/// * This is not called when an entities health is set directly by another mod.
#[derive(Debug, Deserialize)]
pub struct OnEntityDamaged {
    /// The entity that did the attacking if available.
    pub cause: Option<MaybeCycle<LuaEntity>>,
    pub damage_type: MaybeCycle<LuaDamagePrototype>,
    pub entity: MaybeCycle<LuaEntity>,
    /// The damage amount after resistances.
    pub final_damage_amount: f32,
    /// The health of the entity after the damage was applied.
    pub final_health: f32,
    /// The force that did the attacking if any.
    pub force: Option<MaybeCycle<LuaForce>>,
    /// Identifier of the event
    pub name: Events,
    /// The damage amount before resistances.
    pub original_damage_amount: f32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after an entity is destroyed that has been registered with [LuaBootstrap::register_on_entity_destroyed](LuaBootstrap::register_on_entity_destroyed).
///
/// # Notes
///
/// * Depending on when a given entity is destroyed, this event will be fired at the end of the current tick or at the end of the next tick.
#[derive(Debug, Deserialize)]
pub struct OnEntityDestroyed {
    /// Identifier of the event
    pub name: Events,
    /// The number returned by [register_on_entity_destroyed](LuaBootstrap::register_on_entity_destroyed) to uniquely identify this entity during this event.
    pub registration_number: u64,
    /// Tick the event was generated.
    pub tick: u32,
    /// The [LuaEntity::unit_number](LuaEntity::unit_number) of the destroyed entity, if it had one.
    pub unit_number: Option<u32>,
}

/// Called when an entity dies. Can be filtered using [LuaEntityDiedEventFilter](LuaEntityDiedEventFilter).
#[derive(Debug, Deserialize)]
pub struct OnEntityDied {
    /// The entity that did the killing if available.
    pub cause: Option<MaybeCycle<LuaEntity>>,
    /// The damage type if any.
    pub damage_type: Option<MaybeCycle<LuaDamagePrototype>>,
    /// The entity that died.
    pub entity: MaybeCycle<LuaEntity>,
    /// The force that did the killing if any.
    pub force: Option<MaybeCycle<LuaForce>>,
    /// The loot generated by this entity if any.
    pub loot: MaybeCycle<LuaInventory>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when one of an entity's personal logistic slots changes.
///
/// # Notes
///
/// * "Personal logistic slot" refers to a character or vehicle's personal request / auto-trash slots, not the request slots on logistic chests.
#[derive(Debug, Deserialize)]
pub struct OnEntityLogisticSlotChanged {
    /// The entity for whom a logistic slot was changed.
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// The player who changed the slot, or `nil` if changed by script.
    pub player_index: Option<u32>,
    /// The slot index that was changed.
    pub slot_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after an entity has been renamed either by the player or through script.
#[derive(Debug, Deserialize)]
pub struct OnEntityRenamed {
    pub by_script: bool,
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    pub old_name: String,
    /// If by_script is true this will not be included.
    pub player_index: Option<u32>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after entity copy-paste is done.
#[derive(Debug, Deserialize)]
pub struct OnEntitySettingsPasted {
    /// The destination entity settings were copied to.
    pub destination: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// The source entity settings were copied from.
    pub source: MaybeCycle<LuaEntity>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when an entity is spawned by a EnemySpawner
#[derive(Debug, Deserialize)]
pub struct OnEntitySpawned {
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    pub spawner: MaybeCycle<LuaEntity>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after equipment is inserted into an equipment grid.
#[derive(Debug, Deserialize)]
pub struct OnEquipmentInserted {
    /// The equipment inserted.
    pub equipment: MaybeCycle<LuaEquipment>,
    /// The equipment grid inserted into.
    pub grid: MaybeCycle<LuaEquipmentGrid>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after equipment is removed from an equipment grid.
#[derive(Debug, Deserialize)]
pub struct OnEquipmentRemoved {
    /// The count of equipment removed.
    pub count: u32,
    /// The equipment removed.
    pub equipment: String,
    /// The equipment grid removed from.
    pub grid: MaybeCycle<LuaEquipmentGrid>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when the a forces cease fire values change.
#[derive(Debug, Deserialize)]
pub struct OnForceCeaseFireChanged {
    /// If the other force was added or removed.
    pub added: bool,
    /// The force who's cease fire changed.
    pub force: MaybeCycle<LuaForce>,
    /// Identifier of the event
    pub name: Events,
    /// Which force was added or removed.
    pub other_force: MaybeCycle<LuaForce>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a new force is created using `game.create_force()`
///
/// # Notes
///
/// * This is not called when the default forces (`'player'`, `'enemy'`, `'neutral'`) are created as they will always exist.
#[derive(Debug, Deserialize)]
pub struct OnForceCreated {
    /// The newly created force.
    pub force: MaybeCycle<LuaForce>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when the a forces friends change.
#[derive(Debug, Deserialize)]
pub struct OnForceFriendsChanged {
    /// If the other force was added or removed.
    pub added: bool,
    /// The force who's friends changed.
    pub force: MaybeCycle<LuaForce>,
    /// Identifier of the event
    pub name: Events,
    /// Which force was added or removed.
    pub other_force: MaybeCycle<LuaForce>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when [LuaForce::reset](LuaForce::reset) is finished.
#[derive(Debug, Deserialize)]
pub struct OnForceReset {
    pub force: MaybeCycle<LuaForce>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after two forces have been merged using `game.merge_forces()`.
///
/// # Notes
///
/// * The source force is invalidated before this event is called and the name can be re-used in this event if desired.
#[derive(Debug, Deserialize)]
pub struct OnForcesMerged {
    /// The force entities where reassigned to.
    pub destination: MaybeCycle<LuaForce>,
    /// Identifier of the event
    pub name: Events,
    /// The index of the destroyed force.
    pub source_index: u32,
    /// The force destroyed.
    pub source_name: String,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when two forces are about to be merged using `game.merge_forces()`.
#[derive(Debug, Deserialize)]
pub struct OnForcesMerging {
    /// The force to reassign entities to.
    pub destination: MaybeCycle<LuaForce>,
    /// Identifier of the event
    pub name: Events,
    /// The force to be destroyed
    pub source: MaybeCycle<LuaForce>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a game is created from a scenario. This is fired for every mod, even when the scenario's save data already includes it. In those cases however, [LuaBootstrap::on_init](LuaBootstrap::on_init) is not fired.
///
/// # Notes
///
/// * This event is not fired when the scenario is loaded via the map editor.
#[derive(Debug, Deserialize)]
pub struct OnGameCreatedFromScenario {
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when [LuaGuiElement](LuaGuiElement) checked state is changed (related to checkboxes and radio buttons).
#[derive(Debug, Deserialize)]
pub struct OnGuiCheckedStateChanged {
    /// The element whose checked state changed.
    pub element: MaybeCycle<LuaGuiElement>,
    /// Identifier of the event
    pub name: Events,
    /// The player who did the change.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when [LuaGuiElement](LuaGuiElement) is clicked.
#[derive(Debug, Deserialize)]
pub struct OnGuiClick {
    /// If alt was pressed.
    pub alt: bool,
    /// The mouse button used if any.
    pub button: MouseButtonType,
    /// If control was pressed.
    pub control: bool,
    /// The clicked element.
    pub element: MaybeCycle<LuaGuiElement>,
    /// Identifier of the event
    pub name: Events,
    /// The player who did the clicking.
    pub player_index: u32,
    /// If shift was pressed.
    pub shift: bool,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when the player closes the GUI they have open.
///
/// This can only be raised when the GUI's player controller is still valid. If a GUI is thus closed due to the player disconnecting, dying, or becoming a spectator in other ways, it won't cause this event to be raised.
///
/// # Notes
///
/// * It's not advised to open any other GUI during this event because if this is run as a request to open a different GUI the game will force close the new opened GUI without notice to ensure the original requested GUI is opened.
#[derive(Debug, Deserialize)]
pub struct OnGuiClosed {
    /// The custom GUI element that was open
    pub element: Option<MaybeCycle<LuaGuiElement>>,
    /// The entity that was open
    pub entity: Option<MaybeCycle<LuaEntity>>,
    /// The equipment that was open
    pub equipment: Option<MaybeCycle<LuaEquipment>>,
    /// The GUI type that was open.
    pub gui_type: GuiType,
    /// The script inventory that was open
    pub inventory: Option<MaybeCycle<LuaInventory>>,
    /// The item that was open
    pub item: Option<MaybeCycle<LuaItemStack>>,
    /// Identifier of the event
    pub name: Events,
    /// The other player that was open
    pub other_player: Option<MaybeCycle<LuaPlayer>>,
    /// The player.
    pub player_index: u32,
    /// The technology that was automatically selected when opening the research GUI
    pub technology: Option<MaybeCycle<LuaTechnology>>,
    /// Tick the event was generated.
    pub tick: u32,
    /// The tile position that was open
    pub tile_position: Option<TilePosition>,
}

/// Called when a [LuaGuiElement](LuaGuiElement) is confirmed, for example by pressing Enter in a textfield.
#[derive(Debug, Deserialize)]
pub struct OnGuiConfirmed {
    /// If alt was pressed.
    pub alt: bool,
    /// If control was pressed.
    pub control: bool,
    /// The confirmed element.
    pub element: MaybeCycle<LuaGuiElement>,
    /// Identifier of the event
    pub name: Events,
    /// The player who did the confirming.
    pub player_index: u32,
    /// If shift was pressed.
    pub shift: bool,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when [LuaGuiElement](LuaGuiElement) element value is changed (related to choose element buttons).
#[derive(Debug, Deserialize)]
pub struct OnGuiElemChanged {
    /// The element whose element value changed.
    pub element: MaybeCycle<LuaGuiElement>,
    /// Identifier of the event
    pub name: Events,
    /// The player who did the change.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when [LuaGuiElement](LuaGuiElement) is hovered by the mouse.
#[derive(Debug, Deserialize)]
pub struct OnGuiHover {
    /// The element that is being hovered over.
    pub element: MaybeCycle<LuaGuiElement>,
    /// Identifier of the event
    pub name: Events,
    /// The player whose cursor is hovering.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when the player's cursor leaves a [LuaGuiElement](LuaGuiElement) that was previously hovered.
#[derive(Debug, Deserialize)]
pub struct OnGuiLeave {
    /// The element that was being hovered.
    pub element: MaybeCycle<LuaGuiElement>,
    /// Identifier of the event
    pub name: Events,
    /// The player whose cursor was hovering.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when [LuaGuiElement](LuaGuiElement) element location is changed (related to frames in `player.gui.screen`).
#[derive(Debug, Deserialize)]
pub struct OnGuiLocationChanged {
    /// The element whose location changed.
    pub element: MaybeCycle<LuaGuiElement>,
    /// Identifier of the event
    pub name: Events,
    /// The player who did the change.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when the player opens a GUI.
#[derive(Debug, Deserialize)]
pub struct OnGuiOpened {
    /// The custom GUI element that was opened
    pub element: Option<MaybeCycle<LuaGuiElement>>,
    /// The entity that was opened
    pub entity: Option<MaybeCycle<LuaEntity>>,
    /// The equipment that was opened
    pub equipment: Option<MaybeCycle<LuaEquipment>>,
    /// The GUI type that was opened.
    pub gui_type: GuiType,
    /// The script inventory that was opened
    pub inventory: Option<MaybeCycle<LuaInventory>>,
    /// The item that was opened
    pub item: Option<MaybeCycle<LuaItemStack>>,
    /// Identifier of the event
    pub name: Events,
    /// The other player that was opened
    pub other_player: Option<MaybeCycle<LuaPlayer>>,
    /// The player.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when [LuaGuiElement](LuaGuiElement) selected tab is changed (related to tabbed-panes).
#[derive(Debug, Deserialize)]
pub struct OnGuiSelectedTabChanged {
    /// The tabbed pane whose selected tab changed.
    pub element: MaybeCycle<LuaGuiElement>,
    /// Identifier of the event
    pub name: Events,
    /// The player who did the change.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when [LuaGuiElement](LuaGuiElement) selection state is changed (related to drop-downs and listboxes).
#[derive(Debug, Deserialize)]
pub struct OnGuiSelectionStateChanged {
    /// The element whose selection state changed.
    pub element: MaybeCycle<LuaGuiElement>,
    /// Identifier of the event
    pub name: Events,
    /// The player who did the change.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when [LuaGuiElement](LuaGuiElement) switch state is changed (related to switches).
#[derive(Debug, Deserialize)]
pub struct OnGuiSwitchStateChanged {
    /// The switch whose switch state changed.
    pub element: MaybeCycle<LuaGuiElement>,
    /// Identifier of the event
    pub name: Events,
    /// The player who did the change.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when [LuaGuiElement](LuaGuiElement) text is changed by the player.
#[derive(Debug, Deserialize)]
pub struct OnGuiTextChanged {
    /// The edited element.
    pub element: MaybeCycle<LuaGuiElement>,
    /// Identifier of the event
    pub name: Events,
    /// The player who did the edit.
    pub player_index: u32,
    /// The new text in the element.
    pub text: String,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when [LuaGuiElement](LuaGuiElement) slider value is changed (related to the slider element).
#[derive(Debug, Deserialize)]
pub struct OnGuiValueChanged {
    /// The element whose value changed.
    pub element: MaybeCycle<LuaGuiElement>,
    /// Identifier of the event
    pub name: Events,
    /// The player who did the change.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a land mine is armed.
#[derive(Debug, Deserialize)]
pub struct OnLandMineArmed {
    pub mine: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a custom Lua shortcut is pressed.
#[derive(Debug, Deserialize)]
pub struct OnLuaShortcut {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Shortcut prototype name of the shortcut that was clicked.
    pub prototype_name: String,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when an entity is marked for deconstruction with the Deconstruction planner or via script. Can be filtered using [LuaEntityMarkedForDeconstructionEventFilter](LuaEntityMarkedForDeconstructionEventFilter).
#[derive(Debug, Deserialize)]
pub struct OnMarkedForDeconstruction {
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: Option<u32>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when an entity is marked for upgrade with the Upgrade planner or via script. Can be filtered using [LuaEntityMarkedForUpgradeEventFilter](LuaEntityMarkedForUpgradeEventFilter).
#[derive(Debug, Deserialize)]
pub struct OnMarkedForUpgrade {
    /// The new direction (if any)
    pub direction: Option<Direction>,
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: Option<u32>,
    pub target: MaybeCycle<LuaEntityPrototype>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a player purchases some offer from a `market` entity.
#[derive(Debug, Deserialize)]
pub struct OnMarketItemPurchased {
    /// The amount of offers purchased.
    pub count: u32,
    /// The market entity.
    pub market: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// The index of the offer purchased.
    pub offer_index: u32,
    /// The player who did the purchasing.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when the player uses the 'Open item GUI' control on an item defined with the 'mod-openable' flag
#[derive(Debug, Deserialize)]
pub struct OnModItemOpened {
    /// The item clicked on.
    pub item: MaybeCycle<LuaItemPrototype>,
    /// Identifier of the event
    pub name: Events,
    /// The player.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called directly after a permission group is added.
#[derive(Debug, Deserialize)]
pub struct OnPermissionGroupAdded {
    /// The group added.
    pub group: MaybeCycle<LuaPermissionGroup>,
    /// Identifier of the event
    pub name: Events,
    /// The player that added the group.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called directly after a permission group is deleted.
#[derive(Debug, Deserialize)]
pub struct OnPermissionGroupDeleted {
    /// The group that was deleted.
    pub group_name: String,
    /// The group id that was deleted.
    pub id: u32,
    /// Identifier of the event
    pub name: Events,
    /// The player doing the deletion.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called directly after a permission group is edited in some way.
#[derive(Debug, Deserialize)]
pub struct OnPermissionGroupEdited {
    /// The action when the `type` is "add-permission" or "remove-permission".
    pub action: InputAction,
    /// The group being edited.
    pub group: MaybeCycle<LuaPermissionGroup>,
    /// Identifier of the event
    pub name: Events,
    /// The new group name when the `type` is "rename".
    pub new_name: String,
    /// The old group name when the `type` is "rename".
    pub old_name: String,
    /// The other player when the `type` is "add-player" or "remove-player".
    pub other_player_index: u32,
    /// The player that did the editing.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
    /// The edit type: "add-permission", "remove-permission", "enable-all", "disable-all", "add-player", "remove-player", "rename".
    pub typ: String,
}

/// Called directly after a permission string is imported.
#[derive(Debug, Deserialize)]
pub struct OnPermissionStringImported {
    /// Identifier of the event
    pub name: Events,
    /// The player that imported the string.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player picks up an item.
#[derive(Debug, Deserialize)]
pub struct OnPickedUpItem {
    pub item_stack: SimpleItemStack,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a player alt-reverse-selects an area with a selection-tool item.
#[derive(Debug, Deserialize)]
pub struct OnPlayerAltReverseSelectedArea {
    /// The area selected.
    pub area: BoundingBox,
    /// The entities selected.
    pub entities: Vec<LuaEntity>,
    /// The item used to select the area.
    pub item: String,
    /// Identifier of the event
    pub name: Events,
    /// The player doing the selection.
    pub player_index: u32,
    /// The surface selected.
    pub surface: MaybeCycle<LuaSurface>,
    /// Tick the event was generated.
    pub tick: u32,
    /// The tiles selected.
    pub tiles: Vec<LuaTile>,
}

/// Called after a player alt-selects an area with a selection-tool item.
#[derive(Debug, Deserialize)]
pub struct OnPlayerAltSelectedArea {
    /// The area selected.
    pub area: BoundingBox,
    /// The entities selected.
    pub entities: Vec<LuaEntity>,
    /// The item used to select the area.
    pub item: String,
    /// Identifier of the event
    pub name: Events,
    /// The player doing the selection.
    pub player_index: u32,
    /// The surface selected.
    pub surface: MaybeCycle<LuaSurface>,
    /// Tick the event was generated.
    pub tick: u32,
    /// The tiles selected.
    pub tiles: Vec<LuaTile>,
}

/// Called after a players ammo inventory changed in some way.
#[derive(Debug, Deserialize)]
pub struct OnPlayerAmmoInventoryChanged {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a players armor inventory changed in some way.
#[derive(Debug, Deserialize)]
pub struct OnPlayerArmorInventoryChanged {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player is banned.
#[derive(Debug, Deserialize)]
pub struct OnPlayerBanned {
    /// The player that did the banning if any.
    pub by_player: Option<u32>,
    /// Identifier of the event
    pub name: Events,
    /// The player banned.
    pub player_index: Option<u32>,
    /// The banned player name.
    pub player_name: String,
    /// The reason given if any.
    pub reason: Option<String>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a player builds tiles.
#[derive(Debug, Deserialize)]
pub struct OnPlayerBuiltTile {
    /// The item type used to build the tiles
    pub item: Option<MaybeCycle<LuaItemPrototype>>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// The stack used to build the tiles (may be empty if all of the items where used to build the tiles).
    pub stack: Option<MaybeCycle<LuaItemStack>>,
    /// The surface the tile(s) were built on.
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
    /// The tile prototype that was placed.
    pub tile: MaybeCycle<LuaTilePrototype>,
    /// The position data.
    pub tiles: Vec<OldTileAndPosition>,
}

/// Called when a player cancels crafting.
#[derive(Debug, Deserialize)]
pub struct OnPlayerCancelledCrafting {
    /// The number of crafts that have been cancelled.
    pub cancel_count: u32,
    /// The crafting items returned to the player's inventory.
    pub items: MaybeCycle<LuaInventory>,
    /// Identifier of the event
    pub name: Events,
    /// The player that did the crafting.
    pub player_index: u32,
    /// The recipe that has been cancelled.
    pub recipe: MaybeCycle<LuaRecipe>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a player changes forces.
#[derive(Debug, Deserialize)]
pub struct OnPlayerChangedForce {
    /// The old force.
    pub force: MaybeCycle<LuaForce>,
    /// Identifier of the event
    pub name: Events,
    /// The player who changed forces.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when the tile position a player is located at changes.
#[derive(Debug, Deserialize)]
pub struct OnPlayerChangedPosition {
    /// Identifier of the event
    pub name: Events,
    /// The player.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a player changes surfaces.
///
/// # Notes
///
/// * In the instance a player is moved off a surface due to it being deleted this is not called.
#[derive(Debug, Deserialize)]
pub struct OnPlayerChangedSurface {
    /// Identifier of the event
    pub name: Events,
    /// The player who changed surfaces.
    pub player_index: u32,
    /// The surface index the player was on.
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when cheat mode is disabled on a player.
#[derive(Debug, Deserialize)]
pub struct OnPlayerCheatModeDisabled {
    /// Identifier of the event
    pub name: Events,
    /// The player.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when cheat mode is enabled on a player.
#[derive(Debug, Deserialize)]
pub struct OnPlayerCheatModeEnabled {
    /// Identifier of the event
    pub name: Events,
    /// The player.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player clicks a gps tag
#[derive(Debug, Deserialize)]
pub struct OnPlayerClickedGpsTag {
    /// Identifier of the event
    pub name: Events,
    /// Index of the player
    pub player_index: u32,
    /// Map position contained in gps tag
    pub position: MapPosition,
    /// Surface name contained in gps tag, even when such surface does not exists
    pub surface: String,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player clicks the "confirm" button in the configure Blueprint GUI.
#[derive(Debug, Deserialize)]
pub struct OnPlayerConfiguredBlueprint {
    /// Identifier of the event
    pub name: Events,
    /// The player.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player configures spidertron remote to be connected with a given spidertron
#[derive(Debug, Deserialize)]
pub struct OnPlayerConfiguredSpiderRemote {
    /// Identifier of the event
    pub name: Events,
    /// The player that configured the remote.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
    /// Spider vehicle to which remote was connected to.
    pub vehicle: MaybeCycle<LuaEntity>,
}

/// Called when the player finishes crafting an item. This event fires just before the results are inserted into the player's inventory, not when the crafting is queued (see [on_pre_player_crafted_item](on_pre_player_crafted_item)).
#[derive(Debug, Deserialize)]
pub struct OnPlayerCraftedItem {
    /// The item that has been crafted.
    pub item_stack: MaybeCycle<LuaItemStack>,
    /// Identifier of the event
    pub name: Events,
    /// The player doing the crafting.
    pub player_index: u32,
    /// The recipe used to craft this item.
    pub recipe: MaybeCycle<LuaRecipe>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after the player was created.
#[derive(Debug, Deserialize)]
pub struct OnPlayerCreated {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a player's [cursor stack](LuaControl::cursor_stack) changed in some way.
#[derive(Debug, Deserialize)]
pub struct OnPlayerCursorStackChanged {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player selects an area with a deconstruction planner.
#[derive(Debug, Deserialize)]
pub struct OnPlayerDeconstructedArea {
    /// If normal selection or alt selection was used.
    pub alt: bool,
    /// The area selected.
    pub area: BoundingBox,
    /// The item used to select the area.
    pub item: String,
    /// Identifier of the event
    pub name: Events,
    /// The player doing the selection.
    pub player_index: u32,
    /// The surface selected.
    pub surface: MaybeCycle<LuaSurface>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player is demoted.
#[derive(Debug, Deserialize)]
pub struct OnPlayerDemoted {
    /// Identifier of the event
    pub name: Events,
    /// The player.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a player dies.
#[derive(Debug, Deserialize)]
pub struct OnPlayerDied {
    pub cause: Option<MaybeCycle<LuaEntity>>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when the display resolution changes for a given player.
#[derive(Debug, Deserialize)]
pub struct OnPlayerDisplayResolutionChanged {
    /// Identifier of the event
    pub name: Events,
    /// The old display resolution
    pub old_resolution: DisplayResolution,
    /// The player
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when the display scale changes for a given player.
#[derive(Debug, Deserialize)]
pub struct OnPlayerDisplayScaleChanged {
    /// Identifier of the event
    pub name: Events,
    /// The old display scale
    pub old_scale: f64,
    /// The player
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when the player's driving state has changed, meaning a player has either entered or left a vehicle.
///
/// # Notes
///
/// * This event is not raised when the player is ejected from a vehicle due to it being destroyed.
#[derive(Debug, Deserialize)]
pub struct OnPlayerDrivingChangedState {
    /// The vehicle if any.
    pub entity: Option<MaybeCycle<LuaEntity>>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player drops an item on the ground.
#[derive(Debug, Deserialize)]
pub struct OnPlayerDroppedItem {
    /// The item-on-ground entity.
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player fast-transfers something to or from an entity.
#[derive(Debug, Deserialize)]
pub struct OnPlayerFastTransferred {
    /// The entity transferred from or to.
    pub entity: MaybeCycle<LuaEntity>,
    /// Whether the transfer was from player to entity. If `false`, the transfer was from entity to player.
    pub from_player: bool,
    /// Whether the transfer was a split action (half stack).
    pub is_split: bool,
    /// Identifier of the event
    pub name: Events,
    /// The player transferred from or to.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after player flushed fluid
#[derive(Debug, Deserialize)]
pub struct OnPlayerFlushedFluid {
    /// Amount of fluid that was removed
    pub amount: f64,
    /// Entity from which flush was performed
    pub entity: MaybeCycle<LuaEntity>,
    /// Name of a fluid that was flushed
    pub fluid: String,
    /// Identifier of the event
    pub name: Events,
    /// True if flush was requested only on this entity
    pub only_this_entity: bool,
    /// Index of the player
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a players gun inventory changed in some way.
#[derive(Debug, Deserialize)]
pub struct OnPlayerGunInventoryChanged {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a player joins the game. This is not called when loading a save file in singleplayer, as the player doesn't actually leave the game, and the save is just on pause until they rejoin.
#[derive(Debug, Deserialize)]
pub struct OnPlayerJoinedGame {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player is kicked.
#[derive(Debug, Deserialize)]
pub struct OnPlayerKicked {
    /// The player that did the kicking if any.
    pub by_player: Option<u32>,
    /// Identifier of the event
    pub name: Events,
    /// The player kicked.
    pub player_index: u32,
    /// The reason given if any.
    pub reason: Option<String>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a player leaves the game. This is not called when closing a save file in singleplayer, as the player doesn't actually leave the game, and the save is just on pause until they rejoin.
#[derive(Debug, Deserialize)]
pub struct OnPlayerLeftGame {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    pub reason: DisconnectReason,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a players main inventory changed in some way.
#[derive(Debug, Deserialize)]
pub struct OnPlayerMainInventoryChanged {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after the results of an entity being mined are collected just before the entity is destroyed. After this event any items in the buffer will be transferred into the player as if they came from mining the entity. Can be filtered using [LuaPlayerMinedEntityEventFilter](LuaPlayerMinedEntityEventFilter).
///
/// # Notes
///
/// * The buffer inventory is special in that it's only valid during this event and has a dynamic size expanding as more items are transferred into it.
#[derive(Debug, Deserialize)]
pub struct OnPlayerMinedEntity {
    /// The temporary inventory that holds the result of mining the entity.
    pub buffer: MaybeCycle<LuaInventory>,
    /// The entity that has been mined.
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// The index of the player doing the mining.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when the player mines something.
#[derive(Debug, Deserialize)]
pub struct OnPlayerMinedItem {
    /// The item given to the player
    pub item_stack: SimpleItemStack,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a player mines tiles.
#[derive(Debug, Deserialize)]
pub struct OnPlayerMinedTile {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// The surface the tile(s) were mined from.
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
    /// The position data.
    pub tiles: Vec<OldTileAndPosition>,
}

/// Called when a player is muted.
#[derive(Debug, Deserialize)]
pub struct OnPlayerMuted {
    /// Identifier of the event
    pub name: Events,
    /// The player.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player invokes the "smart pipette" over an entity.
#[derive(Debug, Deserialize)]
pub struct OnPlayerPipette {
    /// The item put in the cursor
    pub item: MaybeCycle<LuaItemPrototype>,
    /// Identifier of the event
    pub name: Events,
    /// The player
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
    /// If cheat mode was used to give a free stack of the item.
    pub used_cheat_mode: bool,
}

/// Called after the player puts equipment in an equipment grid
#[derive(Debug, Deserialize)]
pub struct OnPlayerPlacedEquipment {
    /// The equipment put in the equipment grid.
    pub equipment: MaybeCycle<LuaEquipment>,
    /// The equipment grid the equipment was put in.
    pub grid: MaybeCycle<LuaEquipmentGrid>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player is promoted.
#[derive(Debug, Deserialize)]
pub struct OnPlayerPromoted {
    /// Identifier of the event
    pub name: Events,
    /// The player.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player is removed (deleted) from the game. This is markedly different from a player temporarily [leaving](on_player_left_game) the game, and instead behaves like the player never existed in the save file.
#[derive(Debug, Deserialize)]
pub struct OnPlayerRemoved {
    /// Identifier of the event
    pub name: Events,
    /// The index of the removed player.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after the player removes equipment from an equipment grid
#[derive(Debug, Deserialize)]
pub struct OnPlayerRemovedEquipment {
    /// The count of equipment removed.
    pub count: u32,
    /// The equipment removed.
    pub equipment: String,
    /// The equipment grid removed from.
    pub grid: MaybeCycle<LuaEquipmentGrid>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player repairs an entity. Can be filtered using [LuaPlayerRepairedEntityEventFilter](LuaPlayerRepairedEntityEventFilter).
#[derive(Debug, Deserialize)]
pub struct OnPlayerRepairedEntity {
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a player respawns.
#[derive(Debug, Deserialize)]
pub struct OnPlayerRespawned {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// The player port used to respawn if one was used.
    pub player_port: Option<MaybeCycle<LuaEntity>>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a player reverse-selects an area with a selection-tool item.
#[derive(Debug, Deserialize)]
pub struct OnPlayerReverseSelectedArea {
    /// The area selected.
    pub area: BoundingBox,
    /// The entities selected.
    pub entities: Vec<LuaEntity>,
    /// The item used to select the area.
    pub item: String,
    /// Identifier of the event
    pub name: Events,
    /// The player doing the selection.
    pub player_index: u32,
    /// The surface selected.
    pub surface: MaybeCycle<LuaSurface>,
    /// Tick the event was generated.
    pub tick: u32,
    /// The tiles selected.
    pub tiles: Vec<LuaTile>,
}

/// Called when the player rotates an entity. This event is only fired when the entity actually changes its orientation -- pressing the rotate key on an entity that can't be rotated won't fire this event.
#[derive(Debug, Deserialize)]
pub struct OnPlayerRotatedEntity {
    /// The rotated entity.
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// The previous direction
    pub previous_direction: Direction,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a player selects an area with a selection-tool item.
#[derive(Debug, Deserialize)]
pub struct OnPlayerSelectedArea {
    /// The area selected.
    pub area: BoundingBox,
    /// The entities selected.
    pub entities: Vec<LuaEntity>,
    /// The item used to select the area.
    pub item: String,
    /// Identifier of the event
    pub name: Events,
    /// The player doing the selection.
    pub player_index: u32,
    /// The surface selected.
    pub surface: MaybeCycle<LuaSurface>,
    /// Tick the event was generated.
    pub tick: u32,
    /// The tiles selected.
    pub tiles: Vec<LuaTile>,
}

/// Called when a player sets a quickbar slot to anything (new value, or set to empty).
#[derive(Debug, Deserialize)]
pub struct OnPlayerSetQuickBarSlot {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player selects an area with a blueprint.
#[derive(Debug, Deserialize)]
pub struct OnPlayerSetupBlueprint {
    /// If normal selection or alt selection was used.
    pub alt: bool,
    /// The area selected.
    pub area: BoundingBox,
    /// The item used to select the area.
    pub item: String,
    /// The blueprint entity index to source entity mapping. Note: if any mod changes the blueprint this will be incorrect.
    pub mapping: HashMap<u32, LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// The player doing the selection.
    pub player_index: u32,
    /// The surface selected.
    pub surface: MaybeCycle<LuaSurface>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player toggles alt mode, also known as "show entity info".
#[derive(Debug, Deserialize)]
pub struct OnPlayerToggledAltMode {
    /// The new alt mode value. This value is a shortcut for accessing [GameViewSettings::show_entity_info](GameViewSettings::show_entity_info) on the player.
    pub alt_mode: bool,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player toggles the map editor on or off.
#[derive(Debug, Deserialize)]
pub struct OnPlayerToggledMapEditor {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a players trash inventory changed in some way.
#[derive(Debug, Deserialize)]
pub struct OnPlayerTrashInventoryChanged {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player is un-banned.
#[derive(Debug, Deserialize)]
pub struct OnPlayerUnbanned {
    /// The player that did the un-banning if any.
    pub by_player: Option<u32>,
    /// Identifier of the event
    pub name: Events,
    /// The player un-banned.
    pub player_index: Option<u32>,
    /// The player name un-banned.
    pub player_name: String,
    /// The reason the player was banned if any.
    pub reason: Option<String>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player is unmuted.
#[derive(Debug, Deserialize)]
pub struct OnPlayerUnmuted {
    /// Identifier of the event
    pub name: Events,
    /// The player.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player uses a capsule that results in some game action.
#[derive(Debug, Deserialize)]
pub struct OnPlayerUsedCapsule {
    /// The capsule item used.
    pub item: MaybeCycle<LuaItemPrototype>,
    /// Identifier of the event
    pub name: Events,
    /// The player.
    pub player_index: u32,
    /// The position the capsule was used.
    pub position: MapPosition,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player uses spidertron remote to send a spidertron to a given position
#[derive(Debug, Deserialize)]
pub struct OnPlayerUsedSpiderRemote {
    /// Identifier of the event
    pub name: Events,
    /// The player that used the remote.
    pub player_index: u32,
    /// Goal position to which spidertron was sent to.
    pub position: MapPosition,
    /// If the use was successful. It may fail when spidertron has different driver or when player is on different surface.
    pub success: bool,
    /// Tick the event was generated.
    pub tick: u32,
    /// Spider vehicle which was requested to move.
    pub vehicle: MaybeCycle<LuaEntity>,
}

/// Called after an entity dies. Can be filtered using [LuaPostEntityDiedEventFilter](LuaPostEntityDiedEventFilter).
#[derive(Debug, Deserialize)]
pub struct OnPostEntityDied {
    /// The corpses created by the entity dying if any.
    pub corpses: Vec<LuaEntity>,
    /// The damage type if any.
    pub damage_type: Option<MaybeCycle<LuaDamagePrototype>>,
    /// The force that did the killing if any.
    pub force: Option<MaybeCycle<LuaForce>>,
    /// The ghost created by the entity dying if any.
    pub ghost: Option<MaybeCycle<LuaEntity>>,
    /// Identifier of the event
    pub name: Events,
    /// Position where the entity died.
    pub position: MapPosition,
    /// The entity prototype of the entity that died.
    pub prototype: MaybeCycle<LuaEntityPrototype>,
    /// The surface the entity was on.
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
    /// The unit number the entity had if any.
    pub unit_number: Option<u32>,
}

/// Called when players uses an item to build something. Called before [on_built_entity](on_built_entity).
#[derive(Debug, Deserialize)]
pub struct OnPreBuild {
    /// Whether the item was placed while moving.
    pub created_by_moving: bool,
    /// The direction the item was facing when placed.
    pub direction: Direction,
    /// Whether the blueprint was flipped horizontally. `nil` if not built by a blueprint.
    pub flip_horizontal: bool,
    /// Whether the blueprint was flipped vertically. `nil` if not built by a blueprint.
    pub flip_vertical: bool,
    /// Identifier of the event
    pub name: Events,
    /// The player who did the placing.
    pub player_index: u32,
    /// Where the item was placed.
    pub position: MapPosition,
    /// Item was placed using shift building.
    pub shift_build: bool,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called before one or more chunks are deleted using [LuaSurface::delete_chunk](LuaSurface::delete_chunk).
#[derive(Debug, Deserialize)]
pub struct OnPreChunkDeleted {
    /// Identifier of the event
    pub name: Events,
    /// The chunks to be deleted.
    pub positions: Vec<ChunkPosition>,
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called before entity copy-paste is done.
#[derive(Debug, Deserialize)]
pub struct OnPreEntitySettingsPasted {
    /// The destination entity settings will be copied to.
    pub destination: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// The source entity settings will be copied from.
    pub source: MaybeCycle<LuaEntity>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called before a ghost entity is destroyed as a result of being marked for deconstruction. Can be filtered using [LuaPreGhostDeconstructedEventFilter](LuaPreGhostDeconstructedEventFilter).
#[derive(Debug, Deserialize)]
pub struct OnPreGhostDeconstructed {
    pub ghost: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// The player that did the deconstruction if any.
    pub player_index: Option<u32>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called before a ghost entity is upgraded. Can be filtered using [LuaPreGhostUpgradedEventFilter](LuaPreGhostUpgradedEventFilter).
#[derive(Debug, Deserialize)]
pub struct OnPreGhostUpgraded {
    pub ghost: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// The player that did the upgrade if any.
    pub player_index: Option<u32>,
    pub target: MaybeCycle<LuaEntityPrototype>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called directly before a permission group is deleted.
#[derive(Debug, Deserialize)]
pub struct OnPrePermissionGroupDeleted {
    /// The group to be deleted.
    pub group: MaybeCycle<LuaPermissionGroup>,
    /// Identifier of the event
    pub name: Events,
    /// The player doing the deletion.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called directly before a permission string is imported.
#[derive(Debug, Deserialize)]
pub struct OnPrePermissionStringImported {
    /// Identifier of the event
    pub name: Events,
    /// The player importing the string.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a player queues something to be crafted.
#[derive(Debug, Deserialize)]
pub struct OnPrePlayerCraftedItem {
    /// The items removed from the players inventory to do the crafting.
    pub items: MaybeCycle<LuaInventory>,
    /// Identifier of the event
    pub name: Events,
    /// The player doing the crafting.
    pub player_index: u32,
    /// The number of times the recipe is being queued.
    pub queued_count: u32,
    /// The recipe being queued.
    pub recipe: MaybeCycle<LuaRecipe>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called before a players dies.
#[derive(Debug, Deserialize)]
pub struct OnPrePlayerDied {
    pub cause: Option<MaybeCycle<LuaEntity>>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called before a player leaves the game.
#[derive(Debug, Deserialize)]
pub struct OnPrePlayerLeftGame {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    pub reason: DisconnectReason,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when the player completes a mining action, but before the entity is potentially removed from the map. This is called even if the entity does not end up being removed. Can be filtered using [LuaPrePlayerMinedEntityEventFilter](LuaPrePlayerMinedEntityEventFilter).
#[derive(Debug, Deserialize)]
pub struct OnPrePlayerMinedItem {
    /// The entity being mined
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called before a player is removed (deleted) from the game. This is markedly different from a player temporarily [leaving](on_player_left_game) the game, and instead behaves like the player never existed in the save file.
#[derive(Debug, Deserialize)]
pub struct OnPrePlayerRemoved {
    /// Identifier of the event
    pub name: Events,
    /// The index of the removed player.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called before a player toggles the map editor on or off.
#[derive(Debug, Deserialize)]
pub struct OnPrePlayerToggledMapEditor {
    /// Identifier of the event
    pub name: Events,
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called directly before a robot explodes cliffs.
#[derive(Debug, Deserialize)]
pub struct OnPreRobotExplodedCliff {
    pub cliff: MaybeCycle<LuaEntity>,
    /// The cliff explosive used.
    pub item: MaybeCycle<LuaItemPrototype>,
    /// Identifier of the event
    pub name: Events,
    pub robot: MaybeCycle<LuaEntity>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called just before a script inventory is resized.
#[derive(Debug, Deserialize)]
pub struct OnPreScriptInventoryResized {
    pub inventory: MaybeCycle<LuaInventory>,
    /// The mod that did the resizing. This will be `"core"` if done by console command or scenario script.
    pub mod_name: String,
    /// Identifier of the event
    pub name: Events,
    /// The new inventory size.
    pub new_size: u32,
    /// The old inventory size.
    pub old_size: u32,
    /// If done by console command; the player who ran the command.
    pub player_index: Option<u32>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called just before a surface is cleared (all entities removed and all chunks deleted).
#[derive(Debug, Deserialize)]
pub struct OnPreSurfaceCleared {
    /// Identifier of the event
    pub name: Events,
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called just before a surface is deleted.
#[derive(Debug, Deserialize)]
pub struct OnPreSurfaceDeleted {
    /// Identifier of the event
    pub name: Events,
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when research is cancelled.
#[derive(Debug, Deserialize)]
pub struct OnResearchCancelled {
    /// The force whose research was cancelled.
    pub force: MaybeCycle<LuaForce>,
    /// Identifier of the event
    pub name: Events,
    /// A mapping of technology name to how many times it was cancelled.
    pub research: HashMap<String, u32>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a research finishes.
#[derive(Debug, Deserialize)]
pub struct OnResearchFinished {
    /// If the technology was researched by script.
    pub by_script: bool,
    /// Identifier of the event
    pub name: Events,
    /// The researched technology
    pub research: MaybeCycle<LuaTechnology>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a research is reversed (unresearched).
#[derive(Debug, Deserialize)]
pub struct OnResearchReversed {
    /// If the technology was un-researched by script.
    pub by_script: bool,
    /// Identifier of the event
    pub name: Events,
    /// The technology un-researched
    pub research: MaybeCycle<LuaTechnology>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a technology research starts.
#[derive(Debug, Deserialize)]
pub struct OnResearchStarted {
    pub last_research: Option<MaybeCycle<LuaTechnology>>,
    /// Identifier of the event
    pub name: Events,
    /// The technology being researched
    pub research: MaybeCycle<LuaTechnology>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a resource entity reaches 0 or its minimum yield for infinite resources.
#[derive(Debug, Deserialize)]
pub struct OnResourceDepleted {
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a construction robot builds an entity. Can be filtered using [LuaRobotBuiltEntityEventFilter](LuaRobotBuiltEntityEventFilter).
#[derive(Debug, Deserialize)]
pub struct OnRobotBuiltEntity {
    /// The entity built.
    pub created_entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// The robot that did the building.
    pub robot: MaybeCycle<LuaEntity>,
    /// The item used to do the building.
    pub stack: MaybeCycle<LuaItemStack>,
    /// The tags associated with this entity if any.
    pub tags: Option<Tags>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a robot builds tiles.
#[derive(Debug, Deserialize)]
pub struct OnRobotBuiltTile {
    /// The item type used to build the tiles.
    pub item: MaybeCycle<LuaItemPrototype>,
    /// Identifier of the event
    pub name: Events,
    /// The robot.
    pub robot: MaybeCycle<LuaEntity>,
    /// The stack used to build the tiles (may be empty if all of the items where used to build the tiles).
    pub stack: MaybeCycle<LuaItemStack>,
    /// The surface the tile(s) are build on.
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
    /// The tile prototype that was placed.
    pub tile: MaybeCycle<LuaTilePrototype>,
    /// The position data.
    pub tiles: Vec<OldTileAndPosition>,
}

/// Called directly after a robot explodes cliffs.
#[derive(Debug, Deserialize)]
pub struct OnRobotExplodedCliff {
    /// The cliff explosive used.
    pub item: MaybeCycle<LuaItemPrototype>,
    /// Identifier of the event
    pub name: Events,
    pub robot: MaybeCycle<LuaEntity>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a robot mines an entity.
#[derive(Debug, Deserialize)]
pub struct OnRobotMined {
    /// The entity the robot just picked up.
    pub item_stack: SimpleItemStack,
    /// Identifier of the event
    pub name: Events,
    /// The robot that did the mining.
    pub robot: MaybeCycle<LuaEntity>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after the results of an entity being mined are collected just before the entity is destroyed. After this event any items in the buffer will be transferred into the robot as if they came from mining the entity. Can be filtered using [LuaRobotMinedEntityEventFilter](LuaRobotMinedEntityEventFilter).
///
/// # Notes
///
/// * The buffer inventory is special in that it's only valid during this event and has a dynamic size expanding as more items are transferred into it.
#[derive(Debug, Deserialize)]
pub struct OnRobotMinedEntity {
    /// The temporary inventory that holds the result of mining the entity.
    pub buffer: MaybeCycle<LuaInventory>,
    /// The entity that has been mined.
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// The robot doing the mining.
    pub robot: MaybeCycle<LuaEntity>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a robot mines tiles.
#[derive(Debug, Deserialize)]
pub struct OnRobotMinedTile {
    /// Identifier of the event
    pub name: Events,
    /// The robot.
    pub robot: MaybeCycle<LuaEntity>,
    /// The surface the tile(s) were mined on.
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
    /// The position data.
    pub tiles: Vec<OldTileAndPosition>,
}

/// Called before a robot mines an entity. Can be filtered using [LuaPreRobotMinedEntityEventFilter](LuaPreRobotMinedEntityEventFilter).
#[derive(Debug, Deserialize)]
pub struct OnRobotPreMined {
    /// The entity which is about to be mined.
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// The robot that's about to do the mining.
    pub robot: MaybeCycle<LuaEntity>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a rocket silo is ordered to be launched.
#[derive(Debug, Deserialize)]
pub struct OnRocketLaunchOrdered {
    /// Identifier of the event
    pub name: Events,
    /// The player that is riding the rocket, if any.
    pub player_index: Option<u32>,
    pub rocket: MaybeCycle<LuaEntity>,
    pub rocket_silo: MaybeCycle<LuaEntity>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when the rocket is launched.
#[derive(Debug, Deserialize)]
pub struct OnRocketLaunched {
    /// Identifier of the event
    pub name: Events,
    /// The player that is riding the rocket, if any.
    pub player_index: Option<u32>,
    pub rocket: MaybeCycle<LuaEntity>,
    pub rocket_silo: Option<MaybeCycle<LuaEntity>>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a runtime mod setting is changed by a player.
#[derive(Debug, Deserialize)]
pub struct OnRuntimeModSettingChanged {
    /// Identifier of the event
    pub name: Events,
    /// If the `setting_type` is `"global"` and it was changed through the mod settings GUI, this is the index of the player that changed the global setting. If the `setting_type` is `"runtime-per-user"` and it changed a current setting of the player, this is the index of the player whose setting was changed. In all other cases, this is `nil`.
    pub player_index: Option<u32>,
    /// The prototype name of the setting that was changed.
    pub setting: String,
    /// Either "runtime-per-user" or "runtime-global".
    pub setting_type: String,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called just after a script inventory is resized.
#[derive(Debug, Deserialize)]
pub struct OnScriptInventoryResized {
    pub inventory: MaybeCycle<LuaInventory>,
    /// The mod that did the resizing. This will be `"core"` if done by console command or scenario script.
    pub mod_name: String,
    /// Identifier of the event
    pub name: Events,
    /// The new inventory size.
    pub new_size: u32,
    /// The old inventory size.
    pub old_size: u32,
    /// Any items which didn't fit into the new inventory size.
    pub overflow_inventory: MaybeCycle<LuaInventory>,
    /// If done by console command; the player who ran the command.
    pub player_index: Option<u32>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a [LuaSurface::request_path](LuaSurface::request_path) call completes.
#[derive(Debug, Deserialize)]
pub struct OnScriptPathRequestFinished {
    /// Handle to associate the callback with a particular call to [LuaSurface::request_path](LuaSurface::request_path).
    pub id: u32,
    /// Identifier of the event
    pub name: Events,
    /// The actual path that the pathfinder has determined. `nil` if pathfinding failed.
    pub path: Option<Vec<PathfinderWaypoint>>,
    /// Tick the event was generated.
    pub tick: u32,
    /// Indicates that the pathfinder failed because it is too busy, and that you can retry later.
    pub try_again_later: bool,
}

/// Called when a script trigger effect is triggered.
#[derive(Debug, Deserialize)]
pub struct OnScriptTriggerEffect {
    /// The effect_id specified in the trigger effect.
    pub effect_id: String,
    /// Identifier of the event
    pub name: Events,
    pub source_entity: Option<MaybeCycle<LuaEntity>>,
    pub source_position: Option<MapPosition>,
    /// The surface the effect happened on.
    pub surface_index: u32,
    pub target_entity: Option<MaybeCycle<LuaEntity>>,
    pub target_position: Option<MapPosition>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when an entity of type `radar` finishes scanning a sector. Can be filtered for the radar using [LuaSectorScannedEventFilter](LuaSectorScannedEventFilter).
#[derive(Debug, Deserialize)]
pub struct OnSectorScanned {
    /// Area of the scanned chunk.
    pub area: BoundingBox,
    /// The chunk scanned.
    pub chunk_position: ChunkPosition,
    /// Identifier of the event
    pub name: Events,
    /// The radar that did the scanning.
    pub radar: MaybeCycle<LuaEntity>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after the selected entity changes for a given player.
#[derive(Debug, Deserialize)]
pub struct OnSelectedEntityChanged {
    /// The last selected entity if it still exists and there was one.
    pub last_entity: Option<MaybeCycle<LuaEntity>>,
    /// Identifier of the event
    pub name: Events,
    /// The player whose selected entity changed.
    pub player_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a spider finishes moving to its autopilot position.
#[derive(Debug, Deserialize)]
pub struct OnSpiderCommandCompleted {
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
    /// Spider vehicle which was requested to move.
    pub vehicle: MaybeCycle<LuaEntity>,
}

/// Called when a translation request generated through [LuaPlayer::request_translation](LuaPlayer::request_translation) or [LuaPlayer::request_translations](LuaPlayer::request_translations) has been completed.
#[derive(Debug, Deserialize)]
pub struct OnStringTranslated {
    /// The unique id for this translation request.
    pub id: u32,
    /// The localised string being translated.
    pub localised_string: LocalisedString,
    /// Identifier of the event
    pub name: Events,
    /// The player whose locale was used for the translation.
    pub player_index: u32,
    /// The translated `localised_string`.
    pub result: String,
    /// Tick the event was generated.
    pub tick: u32,
    /// Whether the requested localised string was valid and could be translated.
    pub translated: bool,
}

/// Called just after a surface is cleared (all entities removed and all chunks deleted).
#[derive(Debug, Deserialize)]
pub struct OnSurfaceCleared {
    /// Identifier of the event
    pub name: Events,
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a surface is created.
///
/// # Notes
///
/// * This is not called when the default surface is created as it will always exist.
#[derive(Debug, Deserialize)]
pub struct OnSurfaceCreated {
    /// Identifier of the event
    pub name: Events,
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a surface is deleted.
#[derive(Debug, Deserialize)]
pub struct OnSurfaceDeleted {
    /// Identifier of the event
    pub name: Events,
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called after a surface is imported via the map editor.
#[derive(Debug, Deserialize)]
pub struct OnSurfaceImported {
    /// Identifier of the event
    pub name: Events,
    /// The original surface name.
    pub original_name: String,
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a surface is renamed.
#[derive(Debug, Deserialize)]
pub struct OnSurfaceRenamed {
    /// Identifier of the event
    pub name: Events,
    pub new_name: String,
    pub old_name: String,
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when [LuaForce::reset_technology_effects](LuaForce::reset_technology_effects) is finished.
#[derive(Debug, Deserialize)]
pub struct OnTechnologyEffectsReset {
    pub force: MaybeCycle<LuaForce>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// It is fired once every tick. Since this event is fired every tick, its handler shouldn't include performance heavy code.
#[derive(Debug, Deserialize)]
pub struct OnTick {
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a train changes state (started to stopped and vice versa)
#[derive(Debug, Deserialize)]
pub struct OnTrainChangedState {
    /// Identifier of the event
    pub name: Events,
    pub old_state: TrainState,
    /// Tick the event was generated.
    pub tick: u32,
    pub train: MaybeCycle<LuaTrain>,
}

/// Called when a new train is created either through disconnecting/connecting an existing one or building a new one.
#[derive(Debug, Deserialize)]
pub struct OnTrainCreated {
    /// Identifier of the event
    pub name: Events,
    /// The first old train id when splitting/merging trains.
    pub old_train_id_1: Option<u32>,
    /// The second old train id when splitting/merging trains.
    pub old_train_id_2: Option<u32>,
    /// Tick the event was generated.
    pub tick: u32,
    pub train: MaybeCycle<LuaTrain>,
}

/// Called when a trains schedule is changed either by the player or through script.
#[derive(Debug, Deserialize)]
pub struct OnTrainScheduleChanged {
    /// Identifier of the event
    pub name: Events,
    /// The player who made the change if any.
    pub player_index: Option<u32>,
    /// Tick the event was generated.
    pub tick: u32,
    pub train: MaybeCycle<LuaTrain>,
}

/// Called when an entity with a trigger prototype (such as capsules) create an entity AND that trigger prototype defined `trigger_created_entity="true"`.
#[derive(Debug, Deserialize)]
pub struct OnTriggerCreatedEntity {
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    pub source: Option<MaybeCycle<LuaEntity>>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when an entity with a trigger prototype (such as capsules) fire an artillery projectile AND that trigger prototype defined `trigger_fired_artillery="true"`.
#[derive(Debug, Deserialize)]
pub struct OnTriggerFiredArtillery {
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    pub source: Option<MaybeCycle<LuaEntity>>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a unit is added to a unit group.
#[derive(Debug, Deserialize)]
pub struct OnUnitAddedToGroup {
    pub group: MaybeCycle<LuaUnitGroup>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
    pub unit: MaybeCycle<LuaEntity>,
}

/// Called when a new unit group is created, before any members are added to it.
#[derive(Debug, Deserialize)]
pub struct OnUnitGroupCreated {
    pub group: MaybeCycle<LuaUnitGroup>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a unit group finishes gathering and starts executing its command.
#[derive(Debug, Deserialize)]
pub struct OnUnitGroupFinishedGathering {
    pub group: MaybeCycle<LuaUnitGroup>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// Called when a unit is removed from a unit group.
#[derive(Debug, Deserialize)]
pub struct OnUnitRemovedFromGroup {
    pub group: MaybeCycle<LuaUnitGroup>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
    pub unit: MaybeCycle<LuaEntity>,
}

/// Called when a worker (construction or logistic) robot expires through a lack of energy.
#[derive(Debug, Deserialize)]
pub struct OnWorkerRobotExpired {
    /// Identifier of the event
    pub name: Events,
    pub robot: MaybeCycle<LuaEntity>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// A static event mods can use to tell other mods they built something by script. This event is only raised if a mod does so with [LuaBootstrap::raise_event](LuaBootstrap::raise_event) or [LuaBootstrap::raise_script_built](LuaBootstrap::raise_script_built), or when `raise_built` is passed to [LuaSurface::create_entity](LuaSurface::create_entity). Can be filtered using [LuaScriptRaisedBuiltEventFilter](LuaScriptRaisedBuiltEventFilter).
#[derive(Debug, Deserialize)]
pub struct ScriptRaisedBuilt {
    /// The entity that has been built.
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// A static event mods can use to tell other mods they destroyed something by script. This event is only raised if a mod does so with [LuaBootstrap::raise_event](LuaBootstrap::raise_event) or [LuaBootstrap::raise_script_destroy](LuaBootstrap::raise_script_destroy), or when `raise_destroy` is passed to [LuaEntity::destroy](LuaEntity::destroy). Can be filtered using [LuaScriptRaisedDestroyEventFilter](LuaScriptRaisedDestroyEventFilter).
#[derive(Debug, Deserialize)]
pub struct ScriptRaisedDestroy {
    /// The entity that was destroyed.
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// Tick the event was generated.
    pub tick: u32,
}

/// A static event mods can use to tell other mods they revived something by script. This event is only raised if a mod does so with [LuaBootstrap::raise_event](LuaBootstrap::raise_event) or [LuaBootstrap::raise_script_revive](LuaBootstrap::raise_script_revive), or when `raise_revive` is passed to [LuaEntity::revive](LuaEntity::revive). Can be filtered using [LuaScriptRaisedReviveEventFilter](LuaScriptRaisedReviveEventFilter).
#[derive(Debug, Deserialize)]
pub struct ScriptRaisedRevive {
    /// The entity that was revived.
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// The tags associated with this entity, if any.
    pub tags: Option<Tags>,
    /// Tick the event was generated.
    pub tick: u32,
}

/// A static event mods can use to tell other mods they changed tiles on a surface by script. This event is only raised if a mod does so with [LuaBootstrap::raise_event](LuaBootstrap::raise_event) or [LuaBootstrap::raise_script_set_tiles](LuaBootstrap::raise_script_set_tiles), or when `raise_event` is passed to [LuaSurface::set_tiles](LuaSurface::set_tiles).
#[derive(Debug, Deserialize)]
pub struct ScriptRaisedSetTiles {
    /// Identifier of the event
    pub name: Events,
    /// The surface whose tiles were changed.
    pub surface_index: u32,
    /// Tick the event was generated.
    pub tick: u32,
    /// The tiles that were changed.
    pub tiles: Vec<Tile>,
}

/// A static event mods can use to tell other mods they teleported something by script. This event is only raised if a mod does so with [LuaBootstrap::raise_event](LuaBootstrap::raise_event) or [LuaBootstrap::raise_script_teleported](LuaBootstrap::raise_script_teleported), or when `raise_teleported` is passed to [LuaControl::teleport](LuaControl::teleport). Can be filtered using [LuaScriptRaisedTeleportedEventFilter](LuaScriptRaisedTeleportedEventFilter).
#[derive(Debug, Deserialize)]
pub struct ScriptRaisedTeleported {
    /// The entity that was teleported.
    pub entity: MaybeCycle<LuaEntity>,
    /// Identifier of the event
    pub name: Events,
    /// The entity's position before the teleportation.
    pub old_position: MapPosition,
    /// The entity's surface before the teleportation.
    pub old_surface_index: u8,
    /// Tick the event was generated.
    pub tick: u32,
}
